//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\C#\Kompilyatory\bin\Debug\Expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Kompilyatory {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, START_BODY=15, END_BODY=16, 
		RELOP=17, PRINT=18, TYPE=19, LINE=20, ID=21, NUMBER=22, LPAREN=23, RPAREN=24, 
		INTEGER=25, FLOAT=26, ADD=27, SUB=28, SEP=29, MUL=30, EQ_EQ=31, NOT_EQ=32, 
		GT=33, LT=34, LE=35, GE=36, ASSIGNMENT=37, END=38, EMPTY=39;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "START_BODY", "END_BODY", 
		"RELOP", "PRINT", "TYPE", "LINE", "ID", "NUMBER", "DIGIT", "LETTER", "PUNCTUATION", 
		"LPAREN", "RPAREN", "INTEGER", "FLOAT", "ADD", "SUB", "SEP", "MUL", "EQ_EQ", 
		"NOT_EQ", "GT", "LT", "LE", "GE", "ASSIGNMENT", "END", "EMPTY"
	};


	public ExprLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'def Main'", "'.'", "','", "'$'", "'def'", "'->'", "'return'", 
		"'void'", "'for'", "'if'", "'then'", "'else'", "'do'", "'while'", "'begin'", 
		"'end'", null, null, null, null, null, null, "'('", "')'", "'int'", "'float'", 
		"'+'", "'-'", "'/'", "'*'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", 
		"'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "START_BODY", "END_BODY", "RELOP", "PRINT", "TYPE", 
		"LINE", "ID", "NUMBER", "LPAREN", "RPAREN", "INTEGER", "FLOAT", "ADD", 
		"SUB", "SEP", "MUL", "EQ_EQ", "NOT_EQ", "GT", "LT", "LE", "GE", "ASSIGNMENT", 
		"END", "EMPTY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2)\x10F\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xA4\n\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xB2"+
		"\n\x13\x3\x14\x3\x14\x5\x14\xB6\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x6\x15\xBE\n\x15\r\x15\xE\x15\xBF\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x16\a\x16\xC7\n\x16\f\x16\xE\x16\xCA\v\x16\x3\x17\x5\x17\xCD\n\x17"+
		"\x3\x17\x6\x17\xD0\n\x17\r\x17\xE\x17\xD1\x3\x17\x3\x17\x6\x17\xD6\n\x17"+
		"\r\x17\xE\x17\xD7\x5\x17\xDA\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\""+
		"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3"+
		"(\x3)\x3)\x3*\x3*\x3+\x3+\x3+\x3+\x2\x2\x2,\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x17-\x2\x18/\x2\x2\x31\x2\x2\x33\x2\x2\x35\x2\x19\x37\x2"+
		"\x1A\x39\x2\x1B;\x2\x1C=\x2\x1D?\x2\x1E\x41\x2\x1F\x43\x2 \x45\x2!G\x2"+
		"\"I\x2#K\x2$M\x2%O\x2&Q\x2\'S\x2(U\x2)\x3\x2\x6\x3\x2\x32;\x4\x2\x43\\"+
		"\x63|\x6\x2##..\x30\x30<=\x5\x2\v\f\xF\xF\"\"\x11D\x2\x3\x3\x2\x2\x2\x2"+
		"\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2"+
		"\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2"+
		"\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2"+
		"\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2"+
		"\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2"+
		"\x2-\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2"+
		"\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3"+
		"\x2\x2\x2\x2U\x3\x2\x2\x2\x3W\x3\x2\x2\x2\x5`\x3\x2\x2\x2\a\x62\x3\x2"+
		"\x2\x2\t\x64\x3\x2\x2\x2\v\x66\x3\x2\x2\x2\rj\x3\x2\x2\x2\xFm\x3\x2\x2"+
		"\x2\x11t\x3\x2\x2\x2\x13y\x3\x2\x2\x2\x15}\x3\x2\x2\x2\x17\x80\x3\x2\x2"+
		"\x2\x19\x85\x3\x2\x2\x2\x1B\x8A\x3\x2\x2\x2\x1D\x8D\x3\x2\x2\x2\x1F\x93"+
		"\x3\x2\x2\x2!\x99\x3\x2\x2\x2#\xA3\x3\x2\x2\x2%\xB1\x3\x2\x2\x2\'\xB5"+
		"\x3\x2\x2\x2)\xB7\x3\x2\x2\x2+\xC3\x3\x2\x2\x2-\xCC\x3\x2\x2\x2/\xDB\x3"+
		"\x2\x2\x2\x31\xDD\x3\x2\x2\x2\x33\xDF\x3\x2\x2\x2\x35\xE1\x3\x2\x2\x2"+
		"\x37\xE3\x3\x2\x2\x2\x39\xE5\x3\x2\x2\x2;\xE9\x3\x2\x2\x2=\xEF\x3\x2\x2"+
		"\x2?\xF1\x3\x2\x2\x2\x41\xF3\x3\x2\x2\x2\x43\xF5\x3\x2\x2\x2\x45\xF7\x3"+
		"\x2\x2\x2G\xFA\x3\x2\x2\x2I\xFD\x3\x2\x2\x2K\xFF\x3\x2\x2\x2M\x101\x3"+
		"\x2\x2\x2O\x104\x3\x2\x2\x2Q\x107\x3\x2\x2\x2S\x109\x3\x2\x2\x2U\x10B"+
		"\x3\x2\x2\x2WX\a\x66\x2\x2XY\ag\x2\x2YZ\ah\x2\x2Z[\a\"\x2\x2[\\\aO\x2"+
		"\x2\\]\a\x63\x2\x2]^\ak\x2\x2^_\ap\x2\x2_\x4\x3\x2\x2\x2`\x61\a\x30\x2"+
		"\x2\x61\x6\x3\x2\x2\x2\x62\x63\a.\x2\x2\x63\b\x3\x2\x2\x2\x64\x65\a&\x2"+
		"\x2\x65\n\x3\x2\x2\x2\x66g\a\x66\x2\x2gh\ag\x2\x2hi\ah\x2\x2i\f\x3\x2"+
		"\x2\x2jk\a/\x2\x2kl\a@\x2\x2l\xE\x3\x2\x2\x2mn\at\x2\x2no\ag\x2\x2op\a"+
		"v\x2\x2pq\aw\x2\x2qr\at\x2\x2rs\ap\x2\x2s\x10\x3\x2\x2\x2tu\ax\x2\x2u"+
		"v\aq\x2\x2vw\ak\x2\x2wx\a\x66\x2\x2x\x12\x3\x2\x2\x2yz\ah\x2\x2z{\aq\x2"+
		"\x2{|\at\x2\x2|\x14\x3\x2\x2\x2}~\ak\x2\x2~\x7F\ah\x2\x2\x7F\x16\x3\x2"+
		"\x2\x2\x80\x81\av\x2\x2\x81\x82\aj\x2\x2\x82\x83\ag\x2\x2\x83\x84\ap\x2"+
		"\x2\x84\x18\x3\x2\x2\x2\x85\x86\ag\x2\x2\x86\x87\an\x2\x2\x87\x88\au\x2"+
		"\x2\x88\x89\ag\x2\x2\x89\x1A\x3\x2\x2\x2\x8A\x8B\a\x66\x2\x2\x8B\x8C\a"+
		"q\x2\x2\x8C\x1C\x3\x2\x2\x2\x8D\x8E\ay\x2\x2\x8E\x8F\aj\x2\x2\x8F\x90"+
		"\ak\x2\x2\x90\x91\an\x2\x2\x91\x92\ag\x2\x2\x92\x1E\x3\x2\x2\x2\x93\x94"+
		"\a\x64\x2\x2\x94\x95\ag\x2\x2\x95\x96\ai\x2\x2\x96\x97\ak\x2\x2\x97\x98"+
		"\ap\x2\x2\x98 \x3\x2\x2\x2\x99\x9A\ag\x2\x2\x9A\x9B\ap\x2\x2\x9B\x9C\a"+
		"\x66\x2\x2\x9C\"\x3\x2\x2\x2\x9D\xA4\x5\x45#\x2\x9E\xA4\x5I%\x2\x9F\xA4"+
		"\x5K&\x2\xA0\xA4\x5G$\x2\xA1\xA4\x5M\'\x2\xA2\xA4\x5O(\x2\xA3\x9D\x3\x2"+
		"\x2\x2\xA3\x9E\x3\x2\x2\x2\xA3\x9F\x3\x2\x2\x2\xA3\xA0\x3\x2\x2\x2\xA3"+
		"\xA1\x3\x2\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4$\x3\x2\x2\x2\xA5\xA6\ay\x2\x2"+
		"\xA6\xA7\at\x2\x2\xA7\xA8\ak\x2\x2\xA8\xA9\av\x2\x2\xA9\xAA\ag\x2\x2\xAA"+
		"\xAB\an\x2\x2\xAB\xB2\ap\x2\x2\xAC\xAD\ay\x2\x2\xAD\xAE\at\x2\x2\xAE\xAF"+
		"\ak\x2\x2\xAF\xB0\av\x2\x2\xB0\xB2\ag\x2\x2\xB1\xA5\x3\x2\x2\x2\xB1\xAC"+
		"\x3\x2\x2\x2\xB2&\x3\x2\x2\x2\xB3\xB6\x5\x39\x1D\x2\xB4\xB6\x5;\x1E\x2"+
		"\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6(\x3\x2\x2\x2\xB7\xBD\a$\x2"+
		"\x2\xB8\xBE\x5\x31\x19\x2\xB9\xBE\x5\x33\x1A\x2\xBA\xBE\x5#\x12\x2\xBB"+
		"\xBE\x5U+\x2\xBC\xBE\x5/\x18\x2\xBD\xB8\x3\x2\x2\x2\xBD\xB9\x3\x2\x2\x2"+
		"\xBD\xBA\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE\xBF\x3"+
		"\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2"+
		"\xC1\xC2\a$\x2\x2\xC2*\x3\x2\x2\x2\xC3\xC8\x5\x31\x19\x2\xC4\xC7\x5\x31"+
		"\x19\x2\xC5\xC7\x5/\x18\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7"+
		"\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9,\x3\x2\x2"+
		"\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCD\a/\x2\x2\xCC\xCB\x3\x2\x2\x2\xCC\xCD\x3"+
		"\x2\x2\x2\xCD\xCF\x3\x2\x2\x2\xCE\xD0\x5/\x18\x2\xCF\xCE\x3\x2\x2\x2\xD0"+
		"\xD1\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD9\x3\x2"+
		"\x2\x2\xD3\xD5\a\x30\x2\x2\xD4\xD6\x5/\x18\x2\xD5\xD4\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\x3\x2"+
		"\x2\x2\xD9\xD3\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA.\x3\x2\x2\x2\xDB\xDC"+
		"\t\x2\x2\x2\xDC\x30\x3\x2\x2\x2\xDD\xDE\t\x3\x2\x2\xDE\x32\x3\x2\x2\x2"+
		"\xDF\xE0\t\x4\x2\x2\xE0\x34\x3\x2\x2\x2\xE1\xE2\a*\x2\x2\xE2\x36\x3\x2"+
		"\x2\x2\xE3\xE4\a+\x2\x2\xE4\x38\x3\x2\x2\x2\xE5\xE6\ak\x2\x2\xE6\xE7\a"+
		"p\x2\x2\xE7\xE8\av\x2\x2\xE8:\x3\x2\x2\x2\xE9\xEA\ah\x2\x2\xEA\xEB\an"+
		"\x2\x2\xEB\xEC\aq\x2\x2\xEC\xED\a\x63\x2\x2\xED\xEE\av\x2\x2\xEE<\x3\x2"+
		"\x2\x2\xEF\xF0\a-\x2\x2\xF0>\x3\x2\x2\x2\xF1\xF2\a/\x2\x2\xF2@\x3\x2\x2"+
		"\x2\xF3\xF4\a\x31\x2\x2\xF4\x42\x3\x2\x2\x2\xF5\xF6\a,\x2\x2\xF6\x44\x3"+
		"\x2\x2\x2\xF7\xF8\a?\x2\x2\xF8\xF9\a?\x2\x2\xF9\x46\x3\x2\x2\x2\xFA\xFB"+
		"\a#\x2\x2\xFB\xFC\a?\x2\x2\xFCH\x3\x2\x2\x2\xFD\xFE\a@\x2\x2\xFEJ\x3\x2"+
		"\x2\x2\xFF\x100\a>\x2\x2\x100L\x3\x2\x2\x2\x101\x102\a>\x2\x2\x102\x103"+
		"\a?\x2\x2\x103N\x3\x2\x2\x2\x104\x105\a@\x2\x2\x105\x106\a?\x2\x2\x106"+
		"P\x3\x2\x2\x2\x107\x108\a?\x2\x2\x108R\x3\x2\x2\x2\x109\x10A\a=\x2\x2"+
		"\x10AT\x3\x2\x2\x2\x10B\x10C\t\x5\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10E"+
		"\b+\x2\x2\x10EV\x3\x2\x2\x2\xE\x2\xA3\xB1\xB5\xBD\xBF\xC6\xC8\xCC\xD1"+
		"\xD7\xD9\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Kompilyatory
