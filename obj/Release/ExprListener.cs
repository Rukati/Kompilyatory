//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\C#\Kompilyatory\bin\Debug\Expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Kompilyatory {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExprParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IExprListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] ExprParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] ExprParser.ProgContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat([NotNull] ExprParser.StatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat([NotNull] ExprParser.StatContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.callFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallFunc([NotNull] ExprParser.CallFuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.callFunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallFunc([NotNull] ExprParser.CallFuncContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.funcID"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncID([NotNull] ExprParser.FuncIDContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.funcID"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncID([NotNull] ExprParser.FuncIDContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.argc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgc([NotNull] ExprParser.ArgcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.argc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgc([NotNull] ExprParser.ArgcContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] ExprParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] ExprParser.ArgumentsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.initialization"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialization([NotNull] ExprParser.InitializationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.initialization"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialization([NotNull] ExprParser.InitializationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] ExprParser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] ExprParser.FunctionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] ExprParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] ExprParser.ParameterContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.funType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunType([NotNull] ExprParser.FunTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.funType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunType([NotNull] ExprParser.FunTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn([NotNull] ExprParser.ReturnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn([NotNull] ExprParser.ReturnContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor([NotNull] ExprParser.ForContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor([NotNull] ExprParser.ForContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.for_init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_init([NotNull] ExprParser.For_initContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.for_init"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_init([NotNull] ExprParser.For_initContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.for_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_body([NotNull] ExprParser.For_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.for_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_body([NotNull] ExprParser.For_bodyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf([NotNull] ExprParser.IfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf([NotNull] ExprParser.IfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.ifBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfBody([NotNull] ExprParser.IfBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.ifBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfBody([NotNull] ExprParser.IfBodyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.elseBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseBody([NotNull] ExprParser.ElseBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.elseBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseBody([NotNull] ExprParser.ElseBodyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.doWhile"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoWhile([NotNull] ExprParser.DoWhileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.doWhile"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoWhile([NotNull] ExprParser.DoWhileContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile([NotNull] ExprParser.WhileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile([NotNull] ExprParser.WhileContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.whileBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileBody([NotNull] ExprParser.WhileBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.whileBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileBody([NotNull] ExprParser.WhileBodyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.changeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChangeValue([NotNull] ExprParser.ChangeValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.changeValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChangeValue([NotNull] ExprParser.ChangeValueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquation([NotNull] ExprParser.EquationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquation([NotNull] ExprParser.EquationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrint([NotNull] ExprParser.PrintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrint([NotNull] ExprParser.PrintContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] ExprParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] ExprParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.print_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrint_arguments([NotNull] ExprParser.Print_argumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.print_arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrint_arguments([NotNull] ExprParser.Print_argumentsContext context);
}
} // namespace Kompilyatory
