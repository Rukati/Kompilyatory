//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\C#\Kompilyatory\bin\Debug\Expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Kompilyatory {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ExprParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, START_BODY=15, END_BODY=16, 
		RELOP=17, PRINT=18, TYPE=19, LINE=20, ID=21, NUMBER=22, LPAREN=23, RPAREN=24, 
		INTEGER=25, FLOAT=26, ADD=27, SUB=28, SEP=29, MUL=30, EQ_EQ=31, NOT_EQ=32, 
		GT=33, LT=34, LE=35, GE=36, ASSIGNMENT=37, END=38, EMPTY=39;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_callFunc = 2, RULE_funcID = 3, RULE_argc = 4, 
		RULE_arguments = 5, RULE_initialization = 6, RULE_function = 7, RULE_parameter = 8, 
		RULE_funType = 9, RULE_return = 10, RULE_for = 11, RULE_for_init = 12, 
		RULE_for_body = 13, RULE_if = 14, RULE_ifBody = 15, RULE_elseBody = 16, 
		RULE_doWhile = 17, RULE_while = 18, RULE_whileBody = 19, RULE_changeValue = 20, 
		RULE_equation = 21, RULE_print = 22, RULE_expr = 23, RULE_print_arguments = 24;
	public static readonly string[] ruleNames = {
		"prog", "stat", "callFunc", "funcID", "argc", "arguments", "initialization", 
		"function", "parameter", "funType", "return", "for", "for_init", "for_body", 
		"if", "ifBody", "elseBody", "doWhile", "while", "whileBody", "changeValue", 
		"equation", "print", "expr", "print_arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'def Main'", "'.'", "','", "'$'", "'def'", "'->'", "'return'", 
		"'void'", "'for'", "'if'", "'then'", "'else'", "'do'", "'while'", "'begin'", 
		"'end'", null, null, null, null, null, null, "'('", "')'", "'int'", "'float'", 
		"'+'", "'-'", "'/'", "'*'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", 
		"'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "START_BODY", "END_BODY", "RELOP", "PRINT", "TYPE", 
		"LINE", "ID", "NUMBER", "LPAREN", "RPAREN", "INTEGER", "FLOAT", "ADD", 
		"SUB", "SEP", "MUL", "EQ_EQ", "NOT_EQ", "GT", "LT", "LE", "GE", "ASSIGNMENT", 
		"END", "EMPTY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ExprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode START_BODY() { return GetToken(ExprParser.START_BODY, 0); }
		public ITerminalNode END_BODY() { return GetToken(ExprParser.END_BODY, 0); }
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 50; function();
				}
				}
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 56; Match(T__0);
			State = 57; Match(START_BODY);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << PRINT) | (1L << TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 58; stat();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 64; Match(END_BODY);
			State = 65; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public InitializationContext initialization() {
			return GetRuleContext<InitializationContext>(0);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public DoWhileContext doWhile() {
			return GetRuleContext<DoWhileContext>(0);
		}
		public ChangeValueContext changeValue() {
			return GetRuleContext<ChangeValueContext>(0);
		}
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public CallFuncContext callFunc() {
			return GetRuleContext<CallFuncContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 87;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; initialization();
				State = 68; Match(END);
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; print();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; @if();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; @while();
				State = 73; Match(END);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75; doWhile();
				State = 76; Match(END);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 6);
				{
				State = 78; changeValue();
				State = 79; Match(END);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 7);
				{
				State = 81; @for();
				State = 82; Match(END);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 8);
				{
				State = 84; callFunc();
				State = 85; Match(END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFuncContext : ParserRuleContext {
		public FuncIDContext funcID() {
			return GetRuleContext<FuncIDContext>(0);
		}
		public ArgcContext[] argc() {
			return GetRuleContexts<ArgcContext>();
		}
		public ArgcContext argc(int i) {
			return GetRuleContext<ArgcContext>(i);
		}
		public CallFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterCallFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitCallFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallFuncContext callFunc() {
		CallFuncContext _localctx = new CallFuncContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_callFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; funcID();
			State = 90; Match(LPAREN);
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << NUMBER) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 91; argc();
				}
				}
				State = 96;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 97; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncIDContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public FuncIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFuncID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFuncID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncIDContext funcID() {
		FuncIDContext _localctx = new FuncIDContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_funcID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgcContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgcContext[] argc() {
			return GetRuleContexts<ArgcContext>();
		}
		public ArgcContext argc(int i) {
			return GetRuleContext<ArgcContext>(i);
		}
		public ArgcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterArgc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitArgc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgcContext argc() {
		ArgcContext _localctx = new ArgcContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_argc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; arguments();
			State = 109;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__2) {
				{
				State = 102; Match(T__2);
				State = 106;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 103; argc();
						}
						} 
					}
					State = 108;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 111; Match(T__3);
				State = 112; Match(ID);
				}
				break;

			case 2:
				{
				State = 113; Match(NUMBER);
				}
				break;

			case 3:
				{
				State = 114; expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ExprParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(ExprParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CallFuncContext callFunc() {
			return GetRuleContext<CallFuncContext>(0);
		}
		public InitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialization; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterInitialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitInitialization(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializationContext initialization() {
		InitializationContext _localctx = new InitializationContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_initialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(TYPE);
			State = 118; Match(ID);
			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 119; Match(ASSIGNMENT);
				State = 122;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__3:
				case NUMBER:
				case LPAREN:
					{
					State = 120; expr(0);
					}
					break;
				case ID:
					{
					State = 121; callFunc();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public FunTypeContext funType() {
			return GetRuleContext<FunTypeContext>(0);
		}
		public ITerminalNode START_BODY() { return GetToken(ExprParser.START_BODY, 0); }
		public ITerminalNode END_BODY() { return GetToken(ExprParser.END_BODY, 0); }
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__4);
			State = 127; Match(ID);
			State = 128; Match(LPAREN);
			State = 129; parameter();
			State = 130; Match(RPAREN);
			State = 131; Match(T__5);
			State = 132; funType();
			State = 133; Match(START_BODY);
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << PRINT) | (1L << TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 134; stat();
				}
				}
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 140; Match(T__6);
				State = 141; @return();
				State = 142; Match(END);
				}
			}

			State = 146; Match(END_BODY);
			State = 147; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ExprParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_parameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TYPE) {
				{
				State = 149; Match(TYPE);
				State = 150; Match(ID);
				State = 155;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 151; Match(T__2);
						State = 152; parameter();
						}
						} 
					}
					State = 157;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ExprParser.TYPE, 0); }
		public FunTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFunType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFunType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunTypeContext funType() {
		FunTypeContext _localctx = new FunTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_funType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = _input.La(1);
			if ( !(_la==T__7 || _la==TYPE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_return);
		try {
			State = 166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; Match(T__3);
				State = 163; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; Match(NUMBER);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode START_BODY() { return GetToken(ExprParser.START_BODY, 0); }
		public For_bodyContext for_body() {
			return GetRuleContext<For_bodyContext>(0);
		}
		public ITerminalNode END_BODY() { return GetToken(ExprParser.END_BODY, 0); }
		public For_initContext for_init() {
			return GetRuleContext<For_initContext>(0);
		}
		public ChangeValueContext changeValue() {
			return GetRuleContext<ChangeValueContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(T__8);
			State = 169; Match(LPAREN);
			State = 171;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TYPE) {
				{
				State = 170; for_init();
				}
			}

			State = 173; Match(END);
			State = 174; equation();
			State = 175; Match(END);
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__3) {
				{
				State = 176; changeValue();
				}
			}

			State = 179; Match(RPAREN);
			State = 180; Match(START_BODY);
			State = 181; for_body();
			State = 182; Match(END_BODY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(ExprParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(ExprParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public For_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFor_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFor_init(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initContext for_init() {
		For_initContext _localctx = new For_initContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_for_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(TYPE);
			State = 185; Match(ID);
			State = 186; Match(ASSIGNMENT);
			State = 187; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_bodyContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public For_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterFor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitFor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_bodyContext for_body() {
		For_bodyContext _localctx = new For_bodyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_for_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << PRINT) | (1L << TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 189; stat();
				}
				}
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 195; Match(T__6);
				State = 196; @return();
				State = 197; Match(END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode[] START_BODY() { return GetTokens(ExprParser.START_BODY); }
		public ITerminalNode START_BODY(int i) {
			return GetToken(ExprParser.START_BODY, i);
		}
		public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		public ITerminalNode[] END_BODY() { return GetTokens(ExprParser.END_BODY); }
		public ITerminalNode END_BODY(int i) {
			return GetToken(ExprParser.END_BODY, i);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public ElseBodyContext elseBody() {
			return GetRuleContext<ElseBodyContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T__9);
			State = 202; Match(LPAREN);
			State = 203; equation();
			State = 204; Match(RPAREN);
			State = 205; Match(T__10);
			State = 206; Match(START_BODY);
			State = 207; ifBody();
			State = 208; Match(END_BODY);
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 209; Match(T__11);
				State = 210; Match(START_BODY);
				State = 211; elseBody();
				State = 212; Match(END_BODY);
				}
			}

			State = 216; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_ifBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << PRINT) | (1L << TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 218; stat();
				}
				}
				State = 223;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 224; Match(T__6);
				State = 225; @return();
				State = 226; Match(END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBodyContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public ElseBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterElseBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitElseBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBodyContext elseBody() {
		ElseBodyContext _localctx = new ElseBodyContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_elseBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << PRINT) | (1L << TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 230; stat();
				}
				}
				State = 235;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 236; Match(T__6);
				State = 237; @return();
				State = 238; Match(END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileContext : ParserRuleContext {
		public ITerminalNode START_BODY() { return GetToken(ExprParser.START_BODY, 0); }
		public WhileBodyContext whileBody() {
			return GetRuleContext<WhileBodyContext>(0);
		}
		public ITerminalNode END_BODY() { return GetToken(ExprParser.END_BODY, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public DoWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterDoWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitDoWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileContext doWhile() {
		DoWhileContext _localctx = new DoWhileContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_doWhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(T__12);
			State = 243; Match(START_BODY);
			State = 244; whileBody();
			State = 245; Match(END_BODY);
			State = 246; Match(T__13);
			State = 247; Match(LPAREN);
			State = 248; equation();
			State = 249; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode START_BODY() { return GetToken(ExprParser.START_BODY, 0); }
		public WhileBodyContext whileBody() {
			return GetRuleContext<WhileBodyContext>(0);
		}
		public ITerminalNode END_BODY() { return GetToken(ExprParser.END_BODY, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(T__13);
			State = 252; Match(LPAREN);
			State = 253; equation();
			State = 254; Match(RPAREN);
			State = 255; Match(T__12);
			State = 256; Match(START_BODY);
			State = 257; whileBody();
			State = 258; Match(END_BODY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBodyContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public WhileBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterWhileBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitWhileBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBodyContext whileBody() {
		WhileBodyContext _localctx = new WhileBodyContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_whileBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << PRINT) | (1L << TYPE) | (1L << ID))) != 0)) {
				{
				{
				State = 260; stat();
				}
				}
				State = 265;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 270;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 266; Match(T__6);
				State = 267; @return();
				State = 268; Match(END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeValueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(ExprParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ChangeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterChangeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitChangeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeValueContext changeValue() {
		ChangeValueContext _localctx = new ChangeValueContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_changeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(T__3);
			State = 273; Match(ID);
			State = 274; Match(ASSIGNMENT);
			State = 275; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode RELOP() { return GetToken(ExprParser.RELOP, 0); }
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterEquation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitEquation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_equation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; expr(0);
			State = 278; _localctx.op = Match(RELOP);
			State = 279; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(ExprParser.PRINT, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public Print_argumentsContext print_arguments() {
			return GetRuleContext<Print_argumentsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode END() { return GetToken(ExprParser.END, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(PRINT);
			State = 282; Match(LPAREN);
			State = 283; print_arguments();
			State = 284; Match(RPAREN);
			State = 285; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(ExprParser.MUL, 0); }
		public ITerminalNode SEP() { return GetToken(ExprParser.SEP, 0); }
		public ITerminalNode ADD() { return GetToken(ExprParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(ExprParser.SUB, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				{
				State = 288; Match(LPAREN);
				{
				State = 289; expr(0);
				}
				State = 290; Match(RPAREN);
				}
				break;
			case T__3:
				{
				State = 292; Match(T__3);
				State = 293; Match(ID);
				}
				break;
			case NUMBER:
				{
				State = 294; Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 305;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 303;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 297;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 298;
						_la = _input.La(1);
						if ( !(_la==SEP || _la==MUL) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 299; expr(5);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 300;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 301;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 302; expr(4);
						}
						break;
					}
					} 
				}
				State = 307;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Print_argumentsContext : ParserRuleContext {
		public ITerminalNode LINE() { return GetToken(ExprParser.LINE, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode NUMBER() { return GetToken(ExprParser.NUMBER, 0); }
		public Print_argumentsContext[] print_arguments() {
			return GetRuleContexts<Print_argumentsContext>();
		}
		public Print_argumentsContext print_arguments(int i) {
			return GetRuleContext<Print_argumentsContext>(i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(ExprParser.TYPE, 0); }
		public Print_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.EnterPrint_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprListener typedListener = listener as IExprListener;
			if (typedListener != null) typedListener.ExitPrint_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprVisitor<TResult> typedVisitor = visitor as IExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_argumentsContext print_arguments() {
		Print_argumentsContext _localctx = new Print_argumentsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_print_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << LINE) | (1L << NUMBER) | (1L << LPAREN))) != 0)) {
				{
				State = 318;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 308; Match(LINE);
					}
					break;

				case 2:
					{
					State = 309; Match(T__3);
					State = 310; Match(ID);
					}
					break;

				case 3:
					{
					State = 311; Match(NUMBER);
					}
					break;

				case 4:
					{
					{
					State = 315;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
					case 1:
						{
						State = 312; Match(LPAREN);
						State = 313; Match(TYPE);
						State = 314; Match(RPAREN);
						}
						break;
					}
					State = 317; expr(0);
					}
					}
					break;
				}
				State = 324;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 320; Match(T__2);
						State = 321; print_arguments();
						}
						} 
					}
					State = 326;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)\x14C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x3\x2"+
		"\a\x2\x36\n\x2\f\x2\xE\x2\x39\v\x2\x3\x2\x3\x2\x3\x2\a\x2>\n\x2\f\x2\xE"+
		"\x2\x41\v\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3Z\n\x3\x3\x4\x3\x4\x3\x4\a\x4_\n\x4\f\x4\xE\x4\x62\v"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\a\x6k\n\x6\f\x6\xE\x6n\v"+
		"\x6\x5\x6p\n\x6\x3\a\x3\a\x3\a\x3\a\x5\av\n\a\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\b}\n\b\x5\b\x7F\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a"+
		"\t\x8A\n\t\f\t\xE\t\x8D\v\t\x3\t\x3\t\x3\t\x3\t\x5\t\x93\n\t\x3\t\x3\t"+
		"\x3\t\x3\n\x3\n\x3\n\x3\n\a\n\x9C\n\n\f\n\xE\n\x9F\v\n\x5\n\xA1\n\n\x3"+
		"\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\xA9\n\f\x3\r\x3\r\x3\r\x5\r\xAE\n\r\x3"+
		"\r\x3\r\x3\r\x3\r\x5\r\xB4\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\a\xF\xC1\n\xF\f\xF\xE\xF\xC4\v\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\xCA\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD9\n\x10\x3\x10"+
		"\x3\x10\x3\x11\a\x11\xDE\n\x11\f\x11\xE\x11\xE1\v\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\xE7\n\x11\x3\x12\a\x12\xEA\n\x12\f\x12\xE\x12\xED\v"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xF3\n\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\a\x15\x108\n\x15\f\x15\xE\x15"+
		"\x10B\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x111\n\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x5\x19\x12A\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a"+
		"\x19\x132\n\x19\f\x19\xE\x19\x135\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x5\x1A\x13E\n\x1A\x3\x1A\x5\x1A\x141\n\x1A\x3\x1A\x3"+
		"\x1A\a\x1A\x145\n\x1A\f\x1A\xE\x1A\x148\v\x1A\x5\x1A\x14A\n\x1A\x3\x1A"+
		"\x2\x2\x3\x30\x1B\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x2\x5\x4\x2\n\n\x15\x15\x3\x2\x1F \x3\x2\x1D\x1E\x15D"+
		"\x2\x37\x3\x2\x2\x2\x4Y\x3\x2\x2\x2\x6[\x3\x2\x2\x2\b\x65\x3\x2\x2\x2"+
		"\ng\x3\x2\x2\x2\fu\x3\x2\x2\x2\xEw\x3\x2\x2\x2\x10\x80\x3\x2\x2\x2\x12"+
		"\xA0\x3\x2\x2\x2\x14\xA2\x3\x2\x2\x2\x16\xA8\x3\x2\x2\x2\x18\xAA\x3\x2"+
		"\x2\x2\x1A\xBA\x3\x2\x2\x2\x1C\xC2\x3\x2\x2\x2\x1E\xCB\x3\x2\x2\x2 \xDF"+
		"\x3\x2\x2\x2\"\xEB\x3\x2\x2\x2$\xF4\x3\x2\x2\x2&\xFD\x3\x2\x2\x2(\x109"+
		"\x3\x2\x2\x2*\x112\x3\x2\x2\x2,\x117\x3\x2\x2\x2.\x11B\x3\x2\x2\x2\x30"+
		"\x129\x3\x2\x2\x2\x32\x149\x3\x2\x2\x2\x34\x36\x5\x10\t\x2\x35\x34\x3"+
		"\x2\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2"+
		"\x38:\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:;\a\x3\x2\x2;?\a\x11\x2\x2<>\x5"+
		"\x4\x3\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@"+
		"\x42\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a\x12\x2\x2\x43\x44\a\x4\x2"+
		"\x2\x44\x3\x3\x2\x2\x2\x45\x46\x5\xE\b\x2\x46G\a(\x2\x2GZ\x3\x2\x2\x2"+
		"HZ\x5.\x18\x2IZ\x5\x1E\x10\x2JK\x5&\x14\x2KL\a(\x2\x2LZ\x3\x2\x2\x2MN"+
		"\x5$\x13\x2NO\a(\x2\x2OZ\x3\x2\x2\x2PQ\x5*\x16\x2QR\a(\x2\x2RZ\x3\x2\x2"+
		"\x2ST\x5\x18\r\x2TU\a(\x2\x2UZ\x3\x2\x2\x2VW\x5\x6\x4\x2WX\a(\x2\x2XZ"+
		"\x3\x2\x2\x2Y\x45\x3\x2\x2\x2YH\x3\x2\x2\x2YI\x3\x2\x2\x2YJ\x3\x2\x2\x2"+
		"YM\x3\x2\x2\x2YP\x3\x2\x2\x2YS\x3\x2\x2\x2YV\x3\x2\x2\x2Z\x5\x3\x2\x2"+
		"\x2[\\\x5\b\x5\x2\\`\a\x19\x2\x2]_\x5\n\x6\x2^]\x3\x2\x2\x2_\x62\x3\x2"+
		"\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62`\x3\x2\x2"+
		"\x2\x63\x64\a\x1A\x2\x2\x64\a\x3\x2\x2\x2\x65\x66\a\x17\x2\x2\x66\t\x3"+
		"\x2\x2\x2go\x5\f\a\x2hl\a\x5\x2\x2ik\x5\n\x6\x2ji\x3\x2\x2\x2kn\x3\x2"+
		"\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2oh\x3\x2"+
		"\x2\x2op\x3\x2\x2\x2p\v\x3\x2\x2\x2qr\a\x6\x2\x2rv\a\x17\x2\x2sv\a\x18"+
		"\x2\x2tv\x5\x30\x19\x2uq\x3\x2\x2\x2us\x3\x2\x2\x2ut\x3\x2\x2\x2v\r\x3"+
		"\x2\x2\x2wx\a\x15\x2\x2x~\a\x17\x2\x2y|\a\'\x2\x2z}\x5\x30\x19\x2{}\x5"+
		"\x6\x4\x2|z\x3\x2\x2\x2|{\x3\x2\x2\x2}\x7F\x3\x2\x2\x2~y\x3\x2\x2\x2~"+
		"\x7F\x3\x2\x2\x2\x7F\xF\x3\x2\x2\x2\x80\x81\a\a\x2\x2\x81\x82\a\x17\x2"+
		"\x2\x82\x83\a\x19\x2\x2\x83\x84\x5\x12\n\x2\x84\x85\a\x1A\x2\x2\x85\x86"+
		"\a\b\x2\x2\x86\x87\x5\x14\v\x2\x87\x8B\a\x11\x2\x2\x88\x8A\x5\x4\x3\x2"+
		"\x89\x88\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3"+
		"\x2\x2\x2\x8C\x92\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x8F\a\t\x2\x2\x8F"+
		"\x90\x5\x16\f\x2\x90\x91\a(\x2\x2\x91\x93\x3\x2\x2\x2\x92\x8E\x3\x2\x2"+
		"\x2\x92\x93\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\a\x12\x2\x2\x95\x96"+
		"\a\x4\x2\x2\x96\x11\x3\x2\x2\x2\x97\x98\a\x15\x2\x2\x98\x9D\a\x17\x2\x2"+
		"\x99\x9A\a\x5\x2\x2\x9A\x9C\x5\x12\n\x2\x9B\x99\x3\x2\x2\x2\x9C\x9F\x3"+
		"\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2"+
		"\x9F\x9D\x3\x2\x2\x2\xA0\x97\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\x13\x3"+
		"\x2\x2\x2\xA2\xA3\t\x2\x2\x2\xA3\x15\x3\x2\x2\x2\xA4\xA5\a\x6\x2\x2\xA5"+
		"\xA9\a\x17\x2\x2\xA6\xA9\a\x18\x2\x2\xA7\xA9\x5\x30\x19\x2\xA8\xA4\x3"+
		"\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\x17\x3\x2\x2\x2"+
		"\xAA\xAB\a\v\x2\x2\xAB\xAD\a\x19\x2\x2\xAC\xAE\x5\x1A\xE\x2\xAD\xAC\x3"+
		"\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB0\a(\x2\x2\xB0"+
		"\xB1\x5,\x17\x2\xB1\xB3\a(\x2\x2\xB2\xB4\x5*\x16\x2\xB3\xB2\x3\x2\x2\x2"+
		"\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\a\x1A\x2\x2\xB6\xB7\a"+
		"\x11\x2\x2\xB7\xB8\x5\x1C\xF\x2\xB8\xB9\a\x12\x2\x2\xB9\x19\x3\x2\x2\x2"+
		"\xBA\xBB\a\x15\x2\x2\xBB\xBC\a\x17\x2\x2\xBC\xBD\a\'\x2\x2\xBD\xBE\x5"+
		"\x30\x19\x2\xBE\x1B\x3\x2\x2\x2\xBF\xC1\x5\x4\x3\x2\xC0\xBF\x3\x2\x2\x2"+
		"\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC9\x3"+
		"\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC6\a\t\x2\x2\xC6\xC7\x5\x16\f\x2\xC7"+
		"\xC8\a(\x2\x2\xC8\xCA\x3\x2\x2\x2\xC9\xC5\x3\x2\x2\x2\xC9\xCA\x3\x2\x2"+
		"\x2\xCA\x1D\x3\x2\x2\x2\xCB\xCC\a\f\x2\x2\xCC\xCD\a\x19\x2\x2\xCD\xCE"+
		"\x5,\x17\x2\xCE\xCF\a\x1A\x2\x2\xCF\xD0\a\r\x2\x2\xD0\xD1\a\x11\x2\x2"+
		"\xD1\xD2\x5 \x11\x2\xD2\xD8\a\x12\x2\x2\xD3\xD4\a\xE\x2\x2\xD4\xD5\a\x11"+
		"\x2\x2\xD5\xD6\x5\"\x12\x2\xD6\xD7\a\x12\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8"+
		"\xD3\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\a(\x2"+
		"\x2\xDB\x1F\x3\x2\x2\x2\xDC\xDE\x5\x4\x3\x2\xDD\xDC\x3\x2\x2\x2\xDE\xE1"+
		"\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE6\x3\x2\x2"+
		"\x2\xE1\xDF\x3\x2\x2\x2\xE2\xE3\a\t\x2\x2\xE3\xE4\x5\x16\f\x2\xE4\xE5"+
		"\a(\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE2\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2"+
		"\xE7!\x3\x2\x2\x2\xE8\xEA\x5\x4\x3\x2\xE9\xE8\x3\x2\x2\x2\xEA\xED\x3\x2"+
		"\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xF2\x3\x2\x2\x2\xED"+
		"\xEB\x3\x2\x2\x2\xEE\xEF\a\t\x2\x2\xEF\xF0\x5\x16\f\x2\xF0\xF1\a(\x2\x2"+
		"\xF1\xF3\x3\x2\x2\x2\xF2\xEE\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3#\x3\x2"+
		"\x2\x2\xF4\xF5\a\xF\x2\x2\xF5\xF6\a\x11\x2\x2\xF6\xF7\x5(\x15\x2\xF7\xF8"+
		"\a\x12\x2\x2\xF8\xF9\a\x10\x2\x2\xF9\xFA\a\x19\x2\x2\xFA\xFB\x5,\x17\x2"+
		"\xFB\xFC\a\x1A\x2\x2\xFC%\x3\x2\x2\x2\xFD\xFE\a\x10\x2\x2\xFE\xFF\a\x19"+
		"\x2\x2\xFF\x100\x5,\x17\x2\x100\x101\a\x1A\x2\x2\x101\x102\a\xF\x2\x2"+
		"\x102\x103\a\x11\x2\x2\x103\x104\x5(\x15\x2\x104\x105\a\x12\x2\x2\x105"+
		"\'\x3\x2\x2\x2\x106\x108\x5\x4\x3\x2\x107\x106\x3\x2\x2\x2\x108\x10B\x3"+
		"\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x110\x3\x2"+
		"\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x10D\a\t\x2\x2\x10D\x10E\x5\x16\f\x2"+
		"\x10E\x10F\a(\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x10C\x3\x2\x2\x2\x110\x111"+
		"\x3\x2\x2\x2\x111)\x3\x2\x2\x2\x112\x113\a\x6\x2\x2\x113\x114\a\x17\x2"+
		"\x2\x114\x115\a\'\x2\x2\x115\x116\x5\x30\x19\x2\x116+\x3\x2\x2\x2\x117"+
		"\x118\x5\x30\x19\x2\x118\x119\a\x13\x2\x2\x119\x11A\x5\x30\x19\x2\x11A"+
		"-\x3\x2\x2\x2\x11B\x11C\a\x14\x2\x2\x11C\x11D\a\x19\x2\x2\x11D\x11E\x5"+
		"\x32\x1A\x2\x11E\x11F\a\x1A\x2\x2\x11F\x120\a(\x2\x2\x120/\x3\x2\x2\x2"+
		"\x121\x122\b\x19\x1\x2\x122\x123\a\x19\x2\x2\x123\x124\x5\x30\x19\x2\x124"+
		"\x125\a\x1A\x2\x2\x125\x12A\x3\x2\x2\x2\x126\x127\a\x6\x2\x2\x127\x12A"+
		"\a\x17\x2\x2\x128\x12A\a\x18\x2\x2\x129\x121\x3\x2\x2\x2\x129\x126\x3"+
		"\x2\x2\x2\x129\x128\x3\x2\x2\x2\x12A\x133\x3\x2\x2\x2\x12B\x12C\f\x6\x2"+
		"\x2\x12C\x12D\t\x3\x2\x2\x12D\x132\x5\x30\x19\a\x12E\x12F\f\x5\x2\x2\x12F"+
		"\x130\t\x4\x2\x2\x130\x132\x5\x30\x19\x6\x131\x12B\x3\x2\x2\x2\x131\x12E"+
		"\x3\x2\x2\x2\x132\x135\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2\x133\x134\x3"+
		"\x2\x2\x2\x134\x31\x3\x2\x2\x2\x135\x133\x3\x2\x2\x2\x136\x141\a\x16\x2"+
		"\x2\x137\x138\a\x6\x2\x2\x138\x141\a\x17\x2\x2\x139\x141\a\x18\x2\x2\x13A"+
		"\x13B\a\x19\x2\x2\x13B\x13C\a\x15\x2\x2\x13C\x13E\a\x1A\x2\x2\x13D\x13A"+
		"\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x141\x5"+
		"\x30\x19\x2\x140\x136\x3\x2\x2\x2\x140\x137\x3\x2\x2\x2\x140\x139\x3\x2"+
		"\x2\x2\x140\x13D\x3\x2\x2\x2\x141\x146\x3\x2\x2\x2\x142\x143\a\x5\x2\x2"+
		"\x143\x145\x5\x32\x1A\x2\x144\x142\x3\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146"+
		"\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x146"+
		"\x3\x2\x2\x2\x149\x140\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x33\x3\x2"+
		"\x2\x2\"\x37?Y`lou|~\x8B\x92\x9D\xA0\xA8\xAD\xB3\xC2\xC9\xD8\xDF\xE6\xEB"+
		"\xF2\x109\x110\x129\x131\x133\x13D\x140\x146\x149";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Kompilyatory
